// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config/reload": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reloading API configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reload"
                ],
                "summary": "Execute reload config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Reload"
                            }
                        }
                    }
                }
            }
        },
        "/edit/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change vendor name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Change vendor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Provider",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RequestEditVendor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            }
        },
        "/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a list of all routes with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "List subdivision",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of routes per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Sub"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Reload": {
            "type": "object",
            "properties": {
                "reload": {
                    "type": "string"
                }
            }
        },
        "model.RequestEditVendor": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "boolean"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RequestResources"
                    }
                }
            }
        },
        "model.RequestReserveResource": {
            "type": "object",
            "properties": {
                "analizator": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "model.RequestResources": {
            "type": "object",
            "properties": {
                "analizator": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "reserve": {
                    "$ref": "#/definitions/model.RequestReserveResource"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.Sub": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "boolean"
                },
                "analizator": {
                    "type": "string"
                },
                "change_at": {
                    "type": "string"
                },
                "change_login": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                },
                "reserve": {
                    "$ref": "#/definitions/model.SumReserveResource"
                },
                "team": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "model.SumReserveResource": {
            "type": "object",
            "properties": {
                "analizator": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-MFDC-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "MFDC VC API",
	Description:      "Swagger API for Golang Project MFDC VC",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
